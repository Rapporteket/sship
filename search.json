[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) 2020 SKDE  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. sship Copyright (C) 2020 SKDE This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"/articles/extract.html","id":"conventions","dir":"Articles","previous_headings":"","what":"Conventions","title":"Extract cargo from a secure shipment","text":"following conventions assumptions used: cargo shipment found within compressed file named [filename]__[datestamp]_[timestamp].tar.gz [filename] name file encrypted prior shipment, [datestamp] date shipment formatted YYYYMMDD [timestamp] time shipment formatted HHMMSS examples filename data.csv__20200101_081500.tar.gz used file exists current working directory private key represented file ~/.ssh/id_rsa","code":""},{"path":"/articles/extract.html","id":"extract-and-decrypt-content-in-r","dir":"Articles","previous_headings":"","what":"Extract and decrypt content in R","title":"Extract cargo from a secure shipment","text":"Install latest version sship packages R command prompt: load R session: Use dec()-function extract decrypt content: example file data.csv written current working directory. Please use R prompt information.","code":"remotes::install_github(\"Rapporteket/sship\") library(\"sship\") dec(tarfile = \"data.csv__20200101_081500.tar.gz\",     keyfile = \"~/.ssh/id_rsa\",     target_dir = \".\") ?dec"},{"path":"/articles/extract.html","id":"extract-and-decrypt-content-outside-r","dir":"Articles","previous_headings":"","what":"Extract and decrypt content outside R","title":"Extract cargo from a secure shipment","text":"Extraction decryption content encrypted packed sship (R) perfectly possible also outside R. R-function things taken care “hood” aid better understanding information added list “conventions”: encrypting content sship uses AES block cipher CBC mode applying key 256 random bits (32 bytes long) encryption content sship uses initialization vector 128 random bits (16 bytes long) data.csv.enc: encrypted data shipment key.enc: encrypted key iv: initialization vector used encryption decryption just record , names encrypted files ends .enc filename original content (data) represented first part archive filename (shipment) double underscore (__), e.g. given archive filename data.csv__20200101_081500.tar.gz decrypted content established file data.csv example data.csv__20200101_081500.tar.gz can processed Bash shell (unix) command prompt. First, extract archive: , decrypt key using private key: Finally, decrypt content file data.csv: example key iv files binary. using OpenSSL decryption provided strings hexadecimal digits can seen use inline hexdump conversion last command. Methods conversion binary hex may vary systems. might also worth noting AES uses key directly (hash ) passphrase often case elsewhere.","code":"tar -xvzf data.csv__20200101_081500.tar.gz openssl rsautl -decrypt -inkey ~/.ssh/id_rsa -in key.enc -out key openssl aes-256-cbc -d -in data.csv.enc -out data.csv \\ -K $(hexdump -e '32/1 \"%02x\"' key) -iv $(hexdump -e '16/1 \"%02x\"' iv)"},{"path":"/articles/overview.html","id":"two-use-cases","dir":"Articles","previous_headings":"","what":"Two use cases","title":"An overview of sship","text":"Two colleagues working project need exchange files containing data kept secret. benefit keeping workflow within R. able make secure transfer files cleartext person need regular updates secret data centralized data source. source automated R processes can run transfer files person. methods available make secure transfer files cleartext use cases sship can applied tool obtain secure transfer files.","code":""},{"path":"/articles/overview.html","id":"summary-of-how-sship-works","dir":"Articles","previous_headings":"","what":"Summary of how sship works","title":"An overview of sship","text":"brief summary sship . detailed description methods, technology behind safely use found . within R session file protected using strong encryption. encryption original content file available holding key used encryption. Hence, encrypted file can now distributed freely keeping original content safeguarded. Obviously, key allow decryption file distributed “openly” problem legitimate recipient file need key unlock content. key therefore also encrypted use different key: public part key pair belongs recipient. makes sure original key can unlocked recipient’s private key. stage encrypted file encrypted key can shared (openly) recipient able unlock original content. sship also provide tools recipient aid decryption. However, sship based widely used easy accessible key crypto-technology recipient may well apply tools decryption. R therefore dependency forced upon recipients.","code":""},{"path":[]},{"path":"/articles/overview.html","id":"technical-measures-to-protect-content","dir":"Articles","previous_headings":"Details on methods and how to safely apply sship","what":"Technical measures to protect content","title":"An overview of sship","text":"sship file encrypted following hybrid scheme: content encrypted applying symmetric key algorithm using disposable key. key turn encrypted using public-key cryptography public key provided recipient , term “hybrid” refers symmetric asymmetric encryption systems used, term “disposable” means key used symmetric key algorithm applied never re-used encryption data. public key associated corresponding private key kept secret accessible person owning (contrast public key can shared freely). encrypted file encrypted key can now safely shared openly. receiving encrypted files recipient follow reverse hybrid scheme: encrypted “symmetric key” decrypted applying recipients private key decrypted symmetric key used decrypt file holding original content. Method encryption consists generating randomized 256 bit key every time data encrypted. key used encrypt data following Advance Encryption Standard. recipients public key (generated using RSA crypto system) collected /user account GitHub used asymmetrically encrypt “symmetric key”. encrypted data encrypted key shipped recipient. practical implementation encryption decryption describe OpenSSL cryptography library applied. scheme ensures data privacy protected sufficiently strong encryption also along lines recommendations Norwegian National Security Authority decryption can performed recipient.","code":""},{"path":"/articles/overview.html","id":"organizational-measures","dir":"Articles","previous_headings":"Details on methods and how to safely apply sship","what":"Organizational measures","title":"An overview of sship","text":"Technical measures alone guarantee safe exchange secrets. crucial part applying sship exchange public key recipient person entity encryption (provider). paramount recipient authenticated provider. words, provider must absolutely sure public key used belongs recipient, one else. case sship used exchange secrets! sship collects public key external open repository based user id uniquely defining recipient (public key) repository. repositories must provide means authentication (recipient) allows recipient add alter user profile content instance public keys. general authentication based username password sufficient: multi-factor authentication users enforced repository providing public keys sship. addition, provider recipient part organizational structure repository make sure “governance” respect user management. Currently, sship supports GitHub repository public keys. allows multi-factor authentication relevant user management.","code":""},{"path":"/articles/ship.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Make a secure shipment","text":"documents describes make secure shipments R package sship. sship provides technical means strong protections encryption digital content still depends proper knowledgeable use. Therefore, please take moment study next paragraph carefully. sship makes sure secret available recipient applying recipient’s public key. sship used sending secret recipient one must absolutely sure public key used sship belongs intended recipient. authenticity public key established combination technical social means. Technically, public key managed (owner, recipient) key provider enforces multi-factor authentication users. Socially, two parties share secret know (personally, professionally similar) establish trust technology used ensure authenticity public key. Following example authenticity public key may sufficiently established. Person entity X needs send secret data file person entity Y therefor need Y’s public key. public key provider exists (e.g. GitHub) provider X made dedicated group (organization GitHub-terms) enforces multi-factor authentication members. X asks Y apply membership group public key provider. X now expects member request Y grants arrives. Since multi-factor authentication enforced unlikely anyone else Y may add, alter delete Y’s public key provider. X can thereafter collect Y’s public key provider time sufficiently sure authentic.","code":""},{"path":"/articles/ship.html","id":"how-to","dir":"Articles","previous_headings":"","what":"How to","title":"Make a secure shipment","text":"Basically, sship can used three things: encrypt files, send encrypted files decrypt files. latter described article Extract cargo secure shipment. Encryption sending (shipment) files subjects remaining part article.","code":""},{"path":"/articles/ship.html","id":"encrypt-secure-a-file-and-send-ship-it","dir":"Articles","previous_headings":"How to","what":"Encrypt (secure) a file and send (ship) it","title":"Make a secure shipment","text":"encryption shipment can obtained one operation R function sship(): content path file encrypted, recipient unique user id recipient public key provider, pubkey_holder reference known public key provider (see Configure sship ), vessel reference transportation method (see also Configure sship ) declaration optional “freight paper rubber stamp” associated shipment. practical example may look something like : collect myfriend’s public key github use encryption process secret_data.csv shipping ftp. Immediately empty file named pickable shipped using route. myfriend can now check shipment arrived polling file named pickable collect shipment starting process unwrapping decryption.","code":"sship(content, recipient, pubkey_holder, vessel, declaration) sship(\"secret_data.csv\", \"myfriend\", \"github\", \"ftp\", \"pickable\")"},{"path":"/articles/ship.html","id":"configure-sship","dir":"Articles","previous_headings":"How to","what":"Configure sship","title":"Make a secure shipment","text":"arguments sship() just references actual values stored configuration file. sship comes default configuration likely sufficient. local config can made calling create_config() R function found sship (output also shown): example R function sship() references github ftp depends configuration function obtain proper values. reference github already working setup default configuration, ftp . accomplish open file _sship.yml, find appropriate section edit accordingly: recipients may require multiple ways transportation configuration allows making additional entries method transportation.","code":"create_config() [1] \"./_sship.yml file created: fill it in\" ... recipient:   bob:     ftp:       host: ftp.here.no       port: 21       path: path/to/myfriend       user: myfriend       pass: myfriendspassword ..."},{"path":"/articles/ship.html","id":"server-mode","dir":"Articles","previous_headings":"How to > Configure sship","what":"Server mode","title":"Make a secure shipment","text":"ship can also applied tool centralized server-like environment requirements management configuration may differ local instance running R. Every time sship needs information configuration setting looks several places. server setup place look sship’s configuration can provided setting environmental variable R_SSHIP_CONFIG_PATH directory configuration found. Making R_SSHIP_CONFIG_PATH accessible R session, sship abide value. However, local file named _sship.yml exists current working directory take precedence one defined R_SSHIP_CONFIG_PATH.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Edvardsen. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Edvardsen (2022). sship: Tool Secure Shipment Content. R package version 0.9.0, https://github.com/Rapporteket/sship.","code":"@Manual{,   title = {sship: Tool for Secure Shipment of Content},   author = {Are Edvardsen},   year = {2022},   note = {R package version 0.9.0},   url = {https://github.com/Rapporteket/sship}, }"},{"path":"/index.html","id":"sship-","dir":"","previous_headings":"","what":"Tool for Secure Shipment of Content","title":"Tool for Secure Shipment of Content","text":"Convenient tools exchanging files securely within R. encrypting content safe passage files (shipment) can provided common insecure carriers ftp email. Based asymmetric cryptography management shared secrets needed make secure shipment long authentic public keys available. Public keys used secure shipments may also obtained external providers part overall process. Transportation files require relevant services ftp email servers available. overview sship can found article overview sship.","code":""},{"path":"/index.html","id":"install","dir":"","previous_headings":"","what":"Install","title":"Tool for Secure Shipment of Content","text":"Install sship CRAN: can install latest release GitHub : case want latest development version sship use:","code":"install.packages(\"sship\") remotes::install_github(\"Rapporteket/sship@*release\") remotes::install_github(\"Rapporteket/sship\")"},{"path":"/index.html","id":"use","dir":"","previous_headings":"","what":"Use","title":"Tool for Secure Shipment of Content","text":"main purpose sship enable sending file securely recipient. done first encrypting file, wrap together necessary documents sending . Means transportation may vary instance plain file transfer e-mail attachment. convenience recipient sship also contains tools unwrapping decryption.","code":""},{"path":"/index.html","id":"make-a-secure-shipment","dir":"","previous_headings":"Use","what":"Make a secure shipment","title":"Tool for Secure Shipment of Content","text":"shipment secured applying recipient’s public key. content, recipient, provider recipient’s public key, method transportation (vessel) optionally accompanying shipment declaration known sship function can applied encrypt, wrap dispatch shipment, one go: time , valid provider public keys GitHub recipient must corresponding user account contains valid RSA public key. , value recipient also used get local configuration may needed shipment made. Please refer article Make secure shipment sship function documentation details.","code":"sship(content, recipient, pubkey_holder, vessel, declaration)"},{"path":"/index.html","id":"extract-cargo-from-a-secure-shipment","dir":"","previous_headings":"Use","what":"Extract cargo from a secure shipment","title":"Tool for Secure Shipment of Content","text":"Unwrapping decryption can made using function dec() package providing path received tar-file recipient’s private key. also possible specify content stored unwrapped decrypted (specified, content stored working directory): details including description content secure shipment can extracted without R please see article Extract cargo secure shipment.","code":"dec(tarfile, keyfile, target_dir)"},{"path":"/reference/config.html","id":null,"dir":"Reference","previous_headings":"","what":"Functions handling sship R package config — config","title":"Functions handling sship R package config — config","text":"Functions handling sship R package config","code":""},{"path":"/reference/config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Functions handling sship R package config — config","text":"","code":"create_config(dir = \".\")  write_config(config, dir = \".\", filename = \"_sship.yml\")  get_config(dir = \".\")  check_config(config)"},{"path":"/reference/config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Functions handling sship R package config — config","text":"dir string providing path configuration file config list containing configuration filename string defining config filename","code":""},{"path":"/reference/config.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Functions handling sship R package config — config","text":"status message list config","code":""},{"path":"/reference/config.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Functions handling sship R package config — config","text":"","code":"# Create a new config file from package default create_config(dir = tempdir()) #> [1] \"/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T//Rtmpt0SYTP/_sship.yml file created: fill it in\"  # Get config config <- get_config(system.file(\"sship.yml\", package = \"sship\"))  # Check if config is valid check_config(config)  # Write config to file write_config(config, dir = tempdir())"},{"path":"/reference/dec.html","id":null,"dir":"Reference","previous_headings":"","what":"Unpack shipment and decrypt content — dec","title":"Unpack shipment and decrypt content — dec","text":"function tries reverse process enc hence depend conventions used .","code":""},{"path":"/reference/dec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unpack shipment and decrypt content — dec","text":"","code":"dec(tarfile, keyfile = \"~/.ssh/id_rsa\", target_dir = \".\")"},{"path":"/reference/dec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unpack shipment and decrypt content — dec","text":"tarfile Character string providing full path gzip-compressed tarball holding shipment payload, including encrypted files. keyfile Character string providing full path private RSA key used decryption encrypted key part shipment. Default value set ~/.ssh/id_rsa usual path unix type operating systems. target_dir Character string providing full path decrypted file written. Defaults current directory \".\", e.g. function called .","code":""},{"path":"/reference/dec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unpack shipment and decrypt content — dec","text":"Invisibly character string providing file path   decrypted file.","code":""},{"path":"/reference/dec.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Unpack shipment and decrypt content — dec","text":"functions used might vulnerable differences systems running R. Possible caveats may availability (un)tar-function binary streams/files treated.","code":""},{"path":[]},{"path":"/reference/dec.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unpack shipment and decrypt content — dec","text":"","code":"# Please note that these examples will write files to a local temporary # directory.  ## Make temporary workspace wd <- tempdir()  ## Make a private-public key pair named \"id_rsa\" and \"id_rsa.pub\" keygen(directory = wd, type = \"rsa\", overwrite_existing = TRUE) #> sship: Key pair written to /private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/Rtmpt0SYTP  ## Make a secured (encrypted) file saveRDS(iris, file = file.path(wd, \"secret.rds\"), ascii = TRUE) pubkey <- readLines(file.path(wd, \"id_rsa.pub\")) secure_secret_file <-   enc(filename = file.path(wd, \"secret.rds\"),       pubkey_holder = NULL,       pubkey = pubkey) #> sship: Content encrypted and ready for shipment: /var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T//Rtmpt0SYTP/secret.rds__20221213_141800.tar.gz  ## Decrypt secured file using the private key secret_file <-   dec(tarfile = secure_secret_file,       keyfile = file.path(wd, \"id_rsa\"),       target_dir = wd) #> sship: Decrypted file written to /private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/Rtmpt0SYTP/secret.rds"},{"path":"/reference/enc.html","id":null,"dir":"Reference","previous_headings":"","what":"Encryption of shipment content — enc","title":"Encryption of shipment content — enc","text":"Various functions helper functions establish encrypted files. secure content (file) Advanced Encryption Standard (AES) applied ephemeral key consisting 256 random bits. key used encryption (one time decryption later stage). random 128 bit initialization vector (iv) also applied encryption. extra security gain since key never re-used encryption/decryption. , just good measures :-) content encrypted key encrypted applying public key offered recipient. key obtained public provider. Currently, GitHub option. three files: encrypted content, encrypted key (cleartext) iv bundled tarball ready shipment.","code":""},{"path":"/reference/enc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Encryption of shipment content — enc","text":"","code":"enc_filename(filename)  make_pubkey_url(pubkey_holder = \"github\", pid)  get_pubkey(pubkey_holder, pid)  enc(filename, pubkey_holder, pid, pubkey = NULL)"},{"path":"/reference/enc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Encryption of shipment content — enc","text":"filename Character string fully qualified path file. pubkey_holder Character string defining provider public key used encryption symmetric key. Currently, 'github' valid pubkey holder. local pubkey used (see parameter pubkey, pubkey_holder may set NULL value. pid Character string uniquely defining user pubkey_holder also owner  public key. pubkey Character string representing valid public key. Default NULL case key obtained per pubkey_holder.","code":""},{"path":"/reference/enc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Encryption of shipment content — enc","text":"Character string providing filename key","code":""},{"path":"/reference/enc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Encryption of shipment content — enc","text":"Encrypted files can decrypted outside R using OpenSSL library. key initialization vector (iv) binary method uses key directly ([hashed] passphrase). OpenSSL decryption need fed key (iv) string hex digits. Methods conversion binary hex may vary systems. , bash shell (unix) example given Step 1: decrypt symmetric key (open envelope) using private key Step 2: decrypt content key obtained step 1, also converting key iv strings hexadecimal digits","code":"openssl rsautl -decrypt -inkey ~/.ssh/id_rsa -in key.enc -out key openssl aes-256-cbc -d -in data.csv.enc -out data.csv \\ -K $(hexdump -e '32/1 \"%02x\"' key) -iv $(hexdump -e '16/1 \"%02x\"' iv)"},{"path":[]},{"path":"/reference/enc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Encryption of shipment content — enc","text":"","code":"# Please note that these examples will write files to a local temporary # directory.  ## Define temporary working directory and a secret file name wd <- tempdir() secret_file_name <- \"secret.rds\"  ## Add content to the secret file saveRDS(iris, file = file.path(wd, secret_file_name), ascii = TRUE)  ## Make a private-public key pair named \"id_rsa\" and \"id_rsa.pub\" keygen(directory = wd, type = \"rsa\", overwrite_existing = TRUE) #> sship: Key pair written to /private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/Rtmpt0SYTP  ## Load public key pubkey <- readLines(file.path(wd, \"id_rsa.pub\"))  ## Make a secured file (ready for shipment) secure_secret_file <- enc(filename = file.path(wd, \"secret.rds\"),                           pubkey_holder = NULL, pubkey = pubkey) #> sship: Content encrypted and ready for shipment: /var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T//Rtmpt0SYTP/secret.rds__20221213_141800.tar.gz"},{"path":"/reference/github.html","id":null,"dir":"Reference","previous_headings":"","what":"Make calls to the github API — github","title":"Make calls to the github API — github","text":"Provides structured list specified resource github API.","code":""},{"path":"/reference/github.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make calls to the github API — github","text":"","code":"gh(path, proxy_url = NULL, token = NULL)  github_api(path, proxy_url = NULL, token = NULL)  rate_limit(proxy_url = NULL, token = NULL)"},{"path":"/reference/github.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make calls to the github API — github","text":"path Character string path API resource. proxy_url Character string defining network proxy form host:port. Default NULL case API call use proxy. token Character string holding github personal access token (PAT) used requests requires authorization. Default value NULL case request unauthorized unless PAT can obtained environmental variable GITHUB_PAT.","code":""},{"path":"/reference/github.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make calls to the github API — github","text":"list class github_api containing parsed content, API   resource path response object. rate_limit() path   always \"/rate_limit\" can hence used detect limit   exceeded (without counted request ). allowed API   rate exceeded gh() return message stating fact   simple suggestions remedy problem.","code":""},{"path":"/reference/github.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Make calls to the github API — github","text":"use cases gh() relevant. helper function github_api() actual lifting rate_limit() handles API rate limits.","code":""},{"path":"/reference/github.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make calls to the github API — github","text":"","code":"## Get all branches of a repository. If the api rate limit is exceeded this ## function will return NULL and an informative message gh(\"repos/Rapporteket/sship/branches\") #> $content #>       name                               commit.sha #> 1 gh-pages 80c94d4a73569812591d9ad81ff36d833cff12c8 #> 2     main 739887739212802f1cb8a35bd57f4688c1a694b8 #>                                                                                        commit.url #> 1 https://api.github.com/repos/Rapporteket/sship/commits/80c94d4a73569812591d9ad81ff36d833cff12c8 #> 2 https://api.github.com/repos/Rapporteket/sship/commits/739887739212802f1cb8a35bd57f4688c1a694b8 #>   protected protection.enabled #> 1     FALSE              FALSE #> 2      TRUE               TRUE #>   protection.required_status_checks.enforcement_level #> 1                                                 off #> 2                                          non_admins #>                                 protection.required_status_checks.contexts #> 1                                                                          #> 2 macOS-latest (release), ubuntu-20.04 (release), windows-latest (release) #>                                               protection.required_status_checks.checks #> 1                                                                                 NULL #> 2 macOS-latest (release), ubuntu-20.04 (release), windows-latest (release), NA, NA, NA #>                                                                protection_url #> 1 https://api.github.com/repos/Rapporteket/sship/branches/gh-pages/protection #> 2     https://api.github.com/repos/Rapporteket/sship/branches/main/protection #>  #> $path #> [1] \"repos/Rapporteket/sship/branches\" #>  #> $response #> Response [https://api.github.com/repos/Rapporteket/sship/branches] #>   Date: 2022-12-13 14:18 #>   Status: 200 #>   Content-Type: application/json; charset=utf-8 #>   Size: 1.04 kB #>  #>  #> attr(,\"class\") #> [1] \"github_api\"  ## helper functions that will normally not be used github_api(\"/rate_limit\") #> $content #> $content$resources #> $content$resources$core #> $content$resources$core$limit #> [1] 5000 #>  #> $content$resources$core$used #> [1] 29 #>  #> $content$resources$core$remaining #> [1] 4971 #>  #> $content$resources$core$reset #> [1] 1670943319 #>  #>  #> $content$resources$search #> $content$resources$search$limit #> [1] 30 #>  #> $content$resources$search$used #> [1] 0 #>  #> $content$resources$search$remaining #> [1] 30 #>  #> $content$resources$search$reset #> [1] 1670941141 #>  #>  #> $content$resources$graphql #> $content$resources$graphql$limit #> [1] 5000 #>  #> $content$resources$graphql$used #> [1] 0 #>  #> $content$resources$graphql$remaining #> [1] 5000 #>  #> $content$resources$graphql$reset #> [1] 1670944681 #>  #>  #> $content$resources$integration_manifest #> $content$resources$integration_manifest$limit #> [1] 5000 #>  #> $content$resources$integration_manifest$used #> [1] 0 #>  #> $content$resources$integration_manifest$remaining #> [1] 5000 #>  #> $content$resources$integration_manifest$reset #> [1] 1670944681 #>  #>  #> $content$resources$source_import #> $content$resources$source_import$limit #> [1] 100 #>  #> $content$resources$source_import$used #> [1] 0 #>  #> $content$resources$source_import$remaining #> [1] 100 #>  #> $content$resources$source_import$reset #> [1] 1670941141 #>  #>  #> $content$resources$code_scanning_upload #> $content$resources$code_scanning_upload$limit #> [1] 1000 #>  #> $content$resources$code_scanning_upload$used #> [1] 0 #>  #> $content$resources$code_scanning_upload$remaining #> [1] 1000 #>  #> $content$resources$code_scanning_upload$reset #> [1] 1670944681 #>  #>  #> $content$resources$actions_runner_registration #> $content$resources$actions_runner_registration$limit #> [1] 10000 #>  #> $content$resources$actions_runner_registration$used #> [1] 0 #>  #> $content$resources$actions_runner_registration$remaining #> [1] 10000 #>  #> $content$resources$actions_runner_registration$reset #> [1] 1670944681 #>  #>  #> $content$resources$scim #> $content$resources$scim$limit #> [1] 15000 #>  #> $content$resources$scim$used #> [1] 0 #>  #> $content$resources$scim$remaining #> [1] 15000 #>  #> $content$resources$scim$reset #> [1] 1670944681 #>  #>  #> $content$resources$dependency_snapshots #> $content$resources$dependency_snapshots$limit #> [1] 100 #>  #> $content$resources$dependency_snapshots$used #> [1] 0 #>  #> $content$resources$dependency_snapshots$remaining #> [1] 100 #>  #> $content$resources$dependency_snapshots$reset #> [1] 1670941141 #>  #>  #>  #> $content$rate #> $content$rate$limit #> [1] 5000 #>  #> $content$rate$used #> [1] 29 #>  #> $content$rate$remaining #> [1] 4971 #>  #> $content$rate$reset #> [1] 1670943319 #>  #>  #>  #> $path #> [1] \"/rate_limit\" #>  #> $response #> Response [https://api.github.com/rate_limit] #>   Date: 2022-12-13 14:18 #>   Status: 200 #>   Content-Type: application/json; charset=utf-8 #>   Size: 768 B #>  #>  #> attr(,\"class\") #> [1] \"github_api\" rate_limit() #> $content #> $content$resources #> $content$resources$core #> $content$resources$core$limit #> [1] 5000 #>  #> $content$resources$core$used #> [1] 29 #>  #> $content$resources$core$remaining #> [1] 4971 #>  #> $content$resources$core$reset #> [1] 1670943319 #>  #>  #> $content$resources$search #> $content$resources$search$limit #> [1] 30 #>  #> $content$resources$search$used #> [1] 0 #>  #> $content$resources$search$remaining #> [1] 30 #>  #> $content$resources$search$reset #> [1] 1670941141 #>  #>  #> $content$resources$graphql #> $content$resources$graphql$limit #> [1] 5000 #>  #> $content$resources$graphql$used #> [1] 0 #>  #> $content$resources$graphql$remaining #> [1] 5000 #>  #> $content$resources$graphql$reset #> [1] 1670944681 #>  #>  #> $content$resources$integration_manifest #> $content$resources$integration_manifest$limit #> [1] 5000 #>  #> $content$resources$integration_manifest$used #> [1] 0 #>  #> $content$resources$integration_manifest$remaining #> [1] 5000 #>  #> $content$resources$integration_manifest$reset #> [1] 1670944681 #>  #>  #> $content$resources$source_import #> $content$resources$source_import$limit #> [1] 100 #>  #> $content$resources$source_import$used #> [1] 0 #>  #> $content$resources$source_import$remaining #> [1] 100 #>  #> $content$resources$source_import$reset #> [1] 1670941141 #>  #>  #> $content$resources$code_scanning_upload #> $content$resources$code_scanning_upload$limit #> [1] 1000 #>  #> $content$resources$code_scanning_upload$used #> [1] 0 #>  #> $content$resources$code_scanning_upload$remaining #> [1] 1000 #>  #> $content$resources$code_scanning_upload$reset #> [1] 1670944681 #>  #>  #> $content$resources$actions_runner_registration #> $content$resources$actions_runner_registration$limit #> [1] 10000 #>  #> $content$resources$actions_runner_registration$used #> [1] 0 #>  #> $content$resources$actions_runner_registration$remaining #> [1] 10000 #>  #> $content$resources$actions_runner_registration$reset #> [1] 1670944681 #>  #>  #> $content$resources$scim #> $content$resources$scim$limit #> [1] 15000 #>  #> $content$resources$scim$used #> [1] 0 #>  #> $content$resources$scim$remaining #> [1] 15000 #>  #> $content$resources$scim$reset #> [1] 1670944681 #>  #>  #> $content$resources$dependency_snapshots #> $content$resources$dependency_snapshots$limit #> [1] 100 #>  #> $content$resources$dependency_snapshots$used #> [1] 0 #>  #> $content$resources$dependency_snapshots$remaining #> [1] 100 #>  #> $content$resources$dependency_snapshots$reset #> [1] 1670941141 #>  #>  #>  #> $content$rate #> $content$rate$limit #> [1] 5000 #>  #> $content$rate$used #> [1] 29 #>  #> $content$rate$remaining #> [1] 4971 #>  #> $content$rate$reset #> [1] 1670943319 #>  #>  #>  #> $path #> [1] \"/rate_limit\" #>  #> $response #> Response [https://api.github.com/rate_limit] #>   Date: 2022-12-13 14:18 #>   Status: 200 #>   Content-Type: application/json; charset=utf-8 #>   Size: 768 B #>  #>  #> attr(,\"class\") #> [1] \"github_api\""},{"path":"/reference/keygen.html","id":null,"dir":"Reference","previous_headings":"","what":"Make private-public key pair — keygen","title":"Make private-public key pair — keygen","text":"Just convenience , make key pair may used alongside sship. Please note default private key protected password.","code":""},{"path":"/reference/keygen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make private-public key pair — keygen","text":"","code":"keygen(   directory = \"~/.ssh\",   type = \"rsa\",   password = NULL,   overwrite_existing = FALSE )"},{"path":"/reference/keygen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make private-public key pair — keygen","text":"directory Character string path directory key pair written. Default \"~/.ssh\". type Character string defining key type. Must one c(\"rsa\", \"dsa\", \"ecdsa\", \"x25519\", \"ed25529\"). Key lengths set default defined openssl-package. key-pair used package make sure type set \"rsa\". password Character string password protect private key. Default value NULL case private key protected password overwrite_existing Logical whether existing key files similar names overwritten. Set FALSE default.","code":""},{"path":"/reference/keygen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make private-public key pair — keygen","text":"Nothing returned function, message containing directory keys written provided","code":""},{"path":"/reference/keygen.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make private-public key pair — keygen","text":"","code":"keygen(directory = tempdir(), overwrite_existing = TRUE) #> sship: Key pair written to /private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/Rtmpt0SYTP"},{"path":"/reference/pubkey_filter.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter ssh public keys by type — pubkey_filter","title":"Filter ssh public keys by type — pubkey_filter","text":"vector ssh public keys, return given type.","code":""},{"path":"/reference/pubkey_filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter ssh public keys by type — pubkey_filter","text":"","code":"pubkey_filter(keys, type)"},{"path":"/reference/pubkey_filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter ssh public keys by type — pubkey_filter","text":"keys Vector strings representing ssh public keys. type Character string defining ssh public key type pass filter. Relevant values strings returned attributes(openssl::read_pubkey(pubkey))$class[2], e.g. \"rsa\" \"dsa\".","code":""},{"path":"/reference/pubkey_filter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter ssh public keys by type — pubkey_filter","text":"vector strings representing (filtered) public keys.","code":""},{"path":"/reference/pubkey_filter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter ssh public keys by type — pubkey_filter","text":"","code":"## make ssh public key strings rsa_pubkey <- openssl::write_ssh(openssl::rsa_keygen()$pubkey) dsa_pubkey <- openssl::write_ssh(openssl::dsa_keygen()$pubkey)  ## filter keys by type pubkey <- pubkey_filter(c(rsa_pubkey, dsa_pubkey), \"rsa\") identical(pubkey, rsa_pubkey) #> [1] TRUE"},{"path":"/reference/ship.html","id":null,"dir":"Reference","previous_headings":"","what":"Secure cargo and make shipment (secure shipment) — ship","title":"Secure cargo and make shipment (secure shipment) — ship","text":"First, content (file) encrypted packed shipped recipient using specified vessel (transportation method). given vessel available function return error. Optionally, declaration can also associated shipment dispatched immediately actual cargo.","code":""},{"path":"/reference/ship.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Secure cargo and make shipment (secure shipment) — ship","text":"","code":"sship(content, recipient, pubkey_holder, vessel, declaration = \"\")  dispatch(recipient, vessel, cargo)  dispatchable(recipient, vessel)  make_url(recipient, vessel)  make_opts(recipient, vessel)"},{"path":"/reference/ship.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Secure cargo and make shipment (secure shipment) — ship","text":"content Character string: full path file shipped recipient Character string: user name uniquely defining recipient terms public key used securing content identity control upon docking. See also Details. pubkey_holder Character string: holder (recipient's) public key. Currently, viable option 'github'. vessel Character string: means transportation. Currently one 'ssh' 'ftp'. declaration Character string: name empty file associated shipment cargo dispatched immediately . likely use case recipient check file present picking cargo . Default value \"\" case declaration used. cargo Character vector: items associated current shipment. Used internally.","code":""},{"path":"/reference/ship.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Secure cargo and make shipment (secure shipment) — ship","text":"TRUE successful","code":""},{"path":"/reference/ship.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Secure cargo and make shipment (secure shipment) — ship","text":"likely access control enforced docking shipment can commence. recipient list available vessels (transport methods) defined must include relevant credentials. Functions used rely local configuration (sship.yml) access credentials.","code":""},{"path":[]},{"path":"/reference/sym_dec.html","id":null,"dir":"Reference","previous_headings":"","what":"Standard sship symmetric decryption — sym_dec","title":"Standard sship symmetric decryption — sym_dec","text":"Standard sship symmetric decryption","code":""},{"path":"/reference/sym_dec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standard sship symmetric decryption — sym_dec","text":"","code":"sym_dec(data, key, iv = attr(data, \"iv\"))"},{"path":"/reference/sym_dec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standard sship symmetric decryption — sym_dec","text":"data raw vector path file data encrypt decrypt key raw vector length 16, 24 32, e.g. hash shared secret iv raw vector length 16 (aes block size) NULL. initialization vector secret random","code":""},{"path":"/reference/sym_dec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Standard sship symmetric decryption — sym_dec","text":"raw vector decrypted data.","code":""},{"path":"/reference/sym_enc.html","id":null,"dir":"Reference","previous_headings":"","what":"Standard sship symmetric encryption — sym_enc","title":"Standard sship symmetric encryption — sym_enc","text":"Standard sship symmetric encryption","code":""},{"path":"/reference/sym_enc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standard sship symmetric encryption — sym_enc","text":"","code":"sym_enc(data, key, iv = openssl::rand_bytes(16))"},{"path":"/reference/sym_enc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standard sship symmetric encryption — sym_enc","text":"data raw vector path file data encrypt decrypt key raw vector length 16, 24 32, e.g. hash shared secret iv raw vector length 16 (aes block size) NULL. initialization vector secret random","code":""},{"path":"/reference/sym_enc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Standard sship symmetric encryption — sym_enc","text":"raw vector encrypted data.","code":""},{"path":"/news/index.html","id":"sship-090","dir":"Changelog","previous_headings":"","what":"sship 0.9.0","title":"sship 0.9.0","text":"CRAN release: 2022-12-12 new internal functions standard symmetric encryption decryption minor improvements site documentation","code":""},{"path":"/news/index.html","id":"sship-080","dir":"Changelog","previous_headings":"","what":"sship 0.8.0","title":"sship 0.8.0","text":"CRAN release: 2022-08-05 allow authorized requests github api opening re-use functions rapbase (#37) provide existing key files protection overwritten keygen() function (#29) extend types asymmetric keys can created keygen() function clarify need RSA type keys fully utilize functions within package","code":""},{"path":"/news/index.html","id":"sship-074","dir":"Changelog","previous_headings":"","what":"sship 0.7.4","title":"sship 0.7.4","text":"CRAN release: 2022-01-31 mocking tests calling github api (#26) gracefully exit api calls informative message limit exceeded (#27)","code":""},{"path":"/news/index.html","id":"sship-073","dir":"Changelog","previous_headings":"","what":"sship 0.7.3","title":"sship 0.7.3","text":"CRAN release: 2021-11-25 messages functions now explicit origin (sship) (#25)","code":""},{"path":"/news/index.html","id":"sship-072","dir":"Changelog","previous_headings":"","what":"sship 0.7.2","title":"sship 0.7.2","text":"effort circumventing problem older versions R archiving single files using internal implementation tar() (#24)","code":""},{"path":"/news/index.html","id":"sship-071","dir":"Changelog","previous_headings":"","what":"sship 0.7.1","title":"sship 0.7.1","text":"CRAN release: 2021-09-08 fixed error making file archive Solaris: now using R internal implementation tar() (#23)","code":""},{"path":"/news/index.html","id":"sship-070","dir":"Changelog","previous_headings":"","what":"sship 0.7.0","title":"sship 0.7.0","text":"CRAN release: 2021-09-07 adjustments improvements proper release (#20) fixed possible function tampering users environment (#21)","code":""},{"path":"/news/index.html","id":"sship-060","dir":"Changelog","previous_headings":"","what":"sship 0.6.0","title":"sship 0.6.0","text":"added option encryption using local public key (#19)","code":""},{"path":"/news/index.html","id":"sship-052","dir":"Changelog","previous_headings":"","what":"sship 0.5.2","title":"sship 0.5.2","text":"fixed file path bug file decryption (#18)","code":""},{"path":"/news/index.html","id":"sship-051","dir":"Changelog","previous_headings":"","what":"sship 0.5.1","title":"sship 0.5.1","text":"move ci travis github actions eternal branch renamed ‘main’","code":""},{"path":"/news/index.html","id":"sship-05","dir":"Changelog","previous_headings":"","what":"sship 0.5","title":"sship 0.5","text":"add simple use pubkey local file","code":""},{"path":"/news/index.html","id":"sship-04","dir":"Changelog","previous_headings":"","what":"sship 0.4","title":"sship 0.4","text":"adding sftp new shipment method private/public key authentication","code":""},{"path":"/news/index.html","id":"sship-03","dir":"Changelog","previous_headings":"","what":"sship 0.3","title":"sship 0.3","text":"adding function making (ssh) key pairs restructuring config focusing recipient unit testing decryption","code":""},{"path":"/news/index.html","id":"sship-02","dir":"Changelog","previous_headings":"","what":"sship 0.2","title":"sship 0.2","text":"extending correcting documentation server mode handling (global) config adding logo","code":""},{"path":"/news/index.html","id":"sship-01","dir":"Changelog","previous_headings":"","what":"sship 0.1","title":"sship 0.1","text":"Documentation (ambitions) bare bone functions","code":""}]
